from decimal import *
from dolfin import *
from mshr import *
from math import pi, sin, cos, sqrt, fabs
import numpy as np
from matplotlib.pyplot import cm
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
import matplotlib.tri as tri
import matplotlib.mlab as mlab

# MATPLOTLIB CONTOUR FUNCTIONS
def mesh2triang(mesh):
    xy = mesh.coordinates()
    return tri.Triangulation(xy[:, 0], xy[:, 1], mesh.cells()) # Mesh Diagram

def mplot(obj):                     # Function Plot
    plt.gca().set_aspect('equal')
    if isinstance(obj, Function):
        mesh = obj.function_space().mesh()
        if (mesh.geometry().dim() != 2):
            raise(AttributeError)
        if obj.vector().size() == mesh.num_cells():
            C = obj.vector().array()
            plt.tripcolor(mesh2triang(mesh), C)
        else:
            C = obj.compute_vertex_values(mesh)
            plt.tripcolor(mesh2triang(mesh), C, shading='gouraud')
    elif isinstance(obj, Mesh):
        if (obj.geometry().dim() != 2):
            raise(AttributeError)
        plt.triplot(mesh2triang(obj), color='k')

# Define Geometry
B=1
L=1
x0 = 0
y0 = 0
x1 = B
y1 = L
mm=64
nx=mm*B
ny=mm*L

c = min(x1-x0,y1-y0)
mesh= RectangleMesh(Point(x0,y0), Point(x1, y1), nx, ny)


# Create Unstructured mesh

u_rec=Rectangle(Point(0.0,0.0),Point(1.0,1.0))
mesh0=generate_mesh(u_rec,90)



#SKEW MESH FUNCTION

# MESH CONSTRUCTION CODE

nv= mesh.num_vertices()
nc= mesh.num_cells()
coorX = mesh.coordinates()[:,0]
coorY = mesh.coordinates()[:,1]
cells0 = mesh.cells()[:,0]
cells1 = mesh.cells()[:,1]
cells2 = mesh.cells()[:,2]

# Skew Mapping
pi=3.14159265359

def skewcavity(x,y):
    xi = 0.5*(1-np.cos(x*pi))**1
    ups =0.5*(1-np.cos(y*pi))**1
    return(xi,ups)

# OLD MESH COORDINATES -> NEW MESH COORDINATES
r=list()
l=list()
for i in range(nv):
    r.append(skewcavity(coorX[i], coorY[i])[0])
    l.append(skewcavity(coorX[i], coorY[i])[1])

r=np.asarray(r)
l=np.asarray(l)

# MESH GENERATION (Using Mesheditor)
mesh1 = Mesh()
editor = MeshEditor()
editor.open(mesh1,2,2)
editor.init_vertices(nv)
editor.init_cells(nc)
for i in range(nv):
    editor.add_vertex(i, r[i], l[i])
for i in range(nc):
    editor.add_cell(i, cells0[i], cells1[i], cells2[i])
editor.close()

# Mesh Refine Code (UNSTRUCTURED MESH)

for i in range(2):
      g = (max(x1,y1)-max(x0,y0))*0.02/(i+1)
      cell_domains = CellFunction("bool", mesh0)
      cell_domains.set_all(False)
      for cell in cells(mesh0):
          x = cell.midpoint()
          if  (x[0] < x0+g or x[1] < y0+g) or (x[0] > x1-g or x[1] > y1-g): # or (x[0] < x0+g and x[1] < y0+g)  or (x[0] > x1-g and x[1] < g): 
              cell_domains[cell]=True
      #plot(cell_domains, interactive=True)
      mesh0 = refine(mesh0, cell_domains, redistribute=True)

#plot(mesh0)
#plot(mesh)
#plot(mesh1,interactive=True)

#mplot(mesh0)
#plt.savefig("fine_unstructured_grid.png")
#plt.clf() 
#mplot(mesh)
#plt.savefig("fine_structured_grid.png")
#plt.clf() 
#mplot(mesh1)
#plt.savefig("fine_skewed_grid.png")
#plt.clf()
#quit()

#Define Boundaries 


class Omega0(SubDomain):
      def inside(self, x, on_boundary):
          return True if x[0] < DOLFIN_EPS and on_boundary else False 
                                                                          
class Omega1(SubDomain):
      def inside(self, x, on_boundary):
          return True if x[1] > L*(1.0 - DOLFIN_EPS) and on_boundary  else False   


class Omega2(SubDomain):
      def inside(self, x, on_boundary):
          return True if x[0] > B*(1.0 - DOLFIN_EPS)  and on_boundary else False 


class Omega3(SubDomain):
      def inside(self, x, on_boundary):
          return True if x[1] < DOLFIN_EPS and on_boundary else False   

omega1= Omega1()
omega0= Omega0()
omega2= Omega2()
omega3= Omega3()


# MARK SUBDOMAINS (Create mesh functions over the cell facets)
sub_domains = MeshFunction("size_t", mesh1, mesh1.topology().dim() - 1)
sub_domains.set_all(5)
omega0.mark(sub_domains, 0)
omega1.mark(sub_domains, 2)
omega2.mark(sub_domains, 3)
omega3.mark(sub_domains, 4)

plot(sub_domains, interactive=False)

#Define Boundary Parts
boundary_parts = FacetFunction("size_t", mesh1)
omega0.mark(boundary_parts,0)
omega1.mark(boundary_parts,1)
omega2.mark(boundary_parts,2)
omega3.mark(boundary_parts,3)
ds = Measure("ds")[boundary_parts]

# Define function spaces (P2-P1)

# Discretization  parameters
family = "CG"; dfamily = "DG";
shape = "triangle"; order = 2

#mesh1.ufl_cell()

Vs=VectorElement(family, mesh1.ufl_cell(), order)
Zs=VectorElement(dfamily, mesh1.ufl_cell(),  order-1, 3)
Qs=FiniteElement(family, mesh1.ufl_cell(), order-1)

W = FunctionSpace(mesh1,Vs*Zs)
V = FunctionSpace(mesh1,Vs)
Z = FunctionSpace(mesh1,Zs)
Q = FunctionSpace(mesh1,Qs)
Qt = FunctionSpace(mesh1, "CG", 1)

