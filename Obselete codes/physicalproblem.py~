""" Here is a more complicated problem tha can be solved on Python"""

from __future__ import print_function
from dolfin import *
from mshr import *
from math import pi, sin, cos, sqrt
from ufl import *
import numpy as np


T=10.0
A=1.0
R=0.3
theta=0.2
x0=0.6*R*cos(theta)
y0=0.6*R*sin(theta)
sigma=0.025
sigma = 50  # large value for verification

x1=0.0
y1=0.0
r_a= 10
c1 = Circle(Point(x1,y1), r_a)

cyl = c1

# Create mesh
mesh = generate_mesh(cyl, 32)
V = FunctionSpace(mesh, 'Lagrange', 1)

# Define boundary condition w=0
def boundary(x, on_boundary):
    return on_boundary

bc = DirichletBC(V, 0.0 , 'on_boundary')

#Variation problem formulation
W = TrialFunction(V)
v = TestFunction(V)
a = inner(nabla_grad(W),nabla_grad(v))*dx
f = Expression('4*exp(-0.5*(pow(R*x[0]-x0)/sigma, 2) '
             '      -0.5*(pow(R*x[0]-y0)/sigma, 2)))',
                     R=R, x0=x0, y0=y0, sigma=sigma)
L=f*v*dx

#Compute Solution
w=Function(V)
problem=LinearVariationalProblem(a,L,w,bc)
solver =LinearVariationalSolver(problem)
solver.parameters['Linear_solver']='cg'
solver.parameters['preconditioner']='ilu'
solver.solve()

# Plot scaled solution, mesh and pressure
plot(mesh,title='Mesh over scaled domain')
plot(w,title='Scaled deflection')
f=interpolate(f,V)
plot(f,title='Scaled pressure')

#Find maximum real deflection
max_w=w.vector().array().max()
max_D=A*max_w/(8*pi*sigma*T)
print('Maximum real deflection is', max_D)

#Verification for "flat" pressure (large sigma)
if sigma >= 50:
    w_e = Expression("1 - x[0]*x[0] - x[1]*x[1]")
    w_e = interpolate(w_e, V)
    dev = numpy.abs(w_e.vector().array() - w.vector().array()).max()
    print('sigma=%g: max deviation=%e' % (sigma, dev))

# Should be at the end
interactive()
